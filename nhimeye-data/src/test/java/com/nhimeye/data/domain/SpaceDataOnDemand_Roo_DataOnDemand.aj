// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.nhimeye.data.domain;

import com.nhimeye.data.domain.Space;
import com.nhimeye.data.domain.SpaceDataOnDemand;
import com.nhimeye.data.service.SpaceService;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect SpaceDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SpaceDataOnDemand: @Component;
    
    private Random SpaceDataOnDemand.rnd = new SecureRandom();
    
    private List<Space> SpaceDataOnDemand.data;
    
    @Autowired
    SpaceService SpaceDataOnDemand.spaceService;
    
    public Space SpaceDataOnDemand.getNewTransientSpace(int index) {
        Space obj = new Space();
        setName(obj, index);
        setSpaceDomain(obj, index);
        setSpaceKey(obj, index);
        return obj;
    }
    
    public void SpaceDataOnDemand.setName(Space obj, int index) {
        String name = "name_" + index;
        if (name.length() > 125) {
            name = new Random().nextInt(10) + name.substring(1, 125);
        }
        obj.setName(name);
    }
    
    public void SpaceDataOnDemand.setSpaceDomain(Space obj, int index) {
        String spaceDomain = "spaceDomain_" + index;
        if (spaceDomain.length() > 255) {
            spaceDomain = spaceDomain.substring(0, 255);
        }
        obj.setSpaceDomain(spaceDomain);
    }
    
    public void SpaceDataOnDemand.setSpaceKey(Space obj, int index) {
        String spaceKey = "spaceKey_" + index;
        if (spaceKey.length() > 125) {
            spaceKey = new Random().nextInt(10) + spaceKey.substring(1, 125);
        }
        obj.setSpaceKey(spaceKey);
    }
    
    public Space SpaceDataOnDemand.getSpecificSpace(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Space obj = data.get(index);
        BigInteger id = obj.getId();
        return spaceService.findSpace(id);
    }
    
    public Space SpaceDataOnDemand.getRandomSpace() {
        init();
        Space obj = data.get(rnd.nextInt(data.size()));
        BigInteger id = obj.getId();
        return spaceService.findSpace(id);
    }
    
    public boolean SpaceDataOnDemand.modifySpace(Space obj) {
        return false;
    }
    
    public void SpaceDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = spaceService.findSpaceEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Space' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Space>();
        for (int i = 0; i < 10; i++) {
            Space obj = getNewTransientSpace(i);
            try {
                spaceService.saveSpace(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
